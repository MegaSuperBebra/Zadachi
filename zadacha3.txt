
Третья задча, где нужно найти макс путь между вершинами

#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

void show_vector(vector<int>&a_vec) // функция показа вектора
{
    for (int & it : a_vec)
    {
        cout << it + 1 << " ";
    }
}

int main() {
    int n, m;
    cin >> n;
    cin >> m;
    int matrix1[m][2], matrix[n][n];

    for (int i = 0; i < m; i++)
    {
        for (int j = 0; j < 2; j++)
        {
            cin >> matrix1[i][j];
        }
    }

    int start, aim;
    cin >> start >> aim;
    --start;
    --aim;

    for (int i = 0; i < n; i++) // ввод пар
    {
        for (int j = 0; j < n; j++)
            matrix[i][j] = 0;
    }

    for (int i = 0; i < m; i++) // преобразование пар ребер в матрицу смежности
    {
        for (int j = 0; j < 2; j++)
        {
            matrix[matrix1[i][0] - 1][matrix1[i][1] - 1] = 1;
            matrix[matrix1[i][1] - 1][matrix1[i][0] - 1] = 1;
        }
    }


    queue<int> queue;
    queue.push(start);

    vector<int> parents(n, -1);
    vector<int> used(n, 0);
    vector<int> d(n);

    used[start] = true;

    while (!queue.empty()) // алгоритм bfs
    {
        int val = queue.front(); queue.pop();
        for (int i = 0; i < n; ++i)
        {
            if (matrix[val][i] && !used[i])
            {
                d[i] = d[val] + 1;
                parents[i] = val;
                queue.push(i);
                used[i] = true;
            }
        }
    }

    vector<int> way;
    for (int i = aim; i != -1; i = parents[i]) // создание пути
    {
        way.push_back(i);
    }
    cout << way.n() - 1 << endl;
    reverse(way.begin(), way.end());
//    show_vector(parents);
    for (int i : way)
    {
        cout << i + 1 << " ";
    }
}